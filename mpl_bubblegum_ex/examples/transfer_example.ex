# Example: Transferring a compressed NFT and submitting it to Solana Devnet

alias MplBubblegum.Types.Pubkey

# Load payer keypair from file (generated by solana-keygen)
payer_json = Jason.decode!(File.read!("payer.json"))
payer_secret = Base.decode64!(payer_json["secret"])
{:ok, owner} = Pubkey.from_base58(payer_json["public"])

# Load tree creator keypair from file (generated by solana-keygen)
tree_creator_json = Jason.decode!(File.read!("tree_creator.json"))
{:ok, tree_creator} = Pubkey.from_base58(tree_creator_json["public"])

# Load tree config keypair from file (generated by solana-keygen)
tree_config_json = Jason.decode!(File.read!("tree_config.json"))
{:ok, tree_config} = Pubkey.from_base58(tree_config_json["public"])

# Load merkle tree keypair from file (generated by solana-keygen)
merkle_tree_json = Jason.decode!(File.read!("merkle_tree.json"))
{:ok, merkle_tree} = Pubkey.from_base58(merkle_tree_json["public"])

# Load new owner keypair from file (generated by solana-keygen)
new_owner_json = Jason.decode!(File.read!("new_owner.json"))
{:ok, new_owner} = Pubkey.from_base58(new_owner_json["public"])

# Placeholder data (in practice, fetch from blockchain)
root = String.duplicate(<<0>>, 32)         # Placeholder Merkle root
data_hash = String.duplicate(<<1>>, 32)    # Placeholder data hash
creator_hash = String.duplicate(<<2>>, 32) # Placeholder creator hash
nonce = 1                                  # Placeholder nonce
index = 0                                  # Placeholder index

# Transfer transaction
params = %{
  tree_config: tree_config,
  leaf_owner: owner,
  leaf_delegate: owner,
  new_leaf_owner: new_owner,
  merkle_tree: merkle_tree,
  root: root,
  data_hash: data_hash,
  creator_hash: creator_hash,
  nonce: nonce,
  index: index
}

IO.puts("Transferring NFT with pubkeys:")
IO.puts("- Owner: #{payer_json["public"]}")
IO.puts("- Tree Creator: #{tree_creator_json["public"]}")
IO.puts("- Tree Config: #{tree_config_json["public"]}")
IO.puts("- Merkle Tree: #{merkle_tree_json["public"]}")
IO.puts("- New Owner: #{new_owner_json["public"]}")

case MplBubblegum.transfer(params) do
  {:ok, transaction} ->
    IO.puts("Transaction created (size: #{byte_size(transaction)} bytes). Signing and submitting...")
    case MplBubblegum.sign_and_submit_transaction(transaction, payer_secret) do
      {:ok, signature} ->
        IO.puts("Transaction submitted with signature: #{signature}")
        check_status(signature)

      {:error, reason} ->
        IO.puts("Failed to submit transaction: #{reason}")
    end

  {:error, reason} ->
    IO.puts("Failed to create transaction: #{reason}")
end

defp check_status(signature) do
  Process.sleep(2000)
  case MplBubblegum.get_transaction_status(signature) do
    {:ok, "confirmed"} -> IO.puts("Transaction confirmed!")
    {:ok, status} -> IO.puts("Transaction status: #{status}")
    {:error, reason} -> IO.puts("Failed to check status: #{reason}")
  end
end